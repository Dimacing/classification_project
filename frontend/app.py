import streamlit as st
import requests
from typing import Dict, List
import time
import pandas as pd
import json


BACKEND_URL = "http://127.0.0.1:8003"
MODELS = ["simple_nn", "random_forest", "logistic_regression", "transformer"]
LABELS = ["—Å–ø–æ—Ä—Ç", "—é–º–æ—Ä", "—Ä–µ–∫–ª–∞–º–∞", "—Å–æ—Ü—Å–µ—Ç–∏", "–ø–æ–ª–∏—Ç–∏–∫–∞", "–ª–∏—á–Ω–∞—è –∂–∏–∑–Ω—å"]


def get_available_models() -> List[str]:
    return MODELS

def predict_text(text: str) -> Dict:
    target_url = f"{BACKEND_URL}/predict_text"
    st.info(f"Sending request to: {target_url}")
    try:
        response = requests.post(target_url, json={"text": text}, timeout=30)
        st.info(f"API Response Status: {response.status_code}")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.ConnectionError:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É API ({target_url}). –ó–∞–ø—É—â–µ–Ω –ª–∏ –æ–Ω?")
        return None
    except requests.exceptions.Timeout:
        st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
        return None
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
        if e.response is not None:
             st.error(f"API Response Content: {e.response.text}")
             try:
                 error_detail = e.response.json().get("detail", "–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π")
                 st.error(f"–î–µ—Ç–∞–ª–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {error_detail}")
             except json.JSONDecodeError:
                 pass
        return None

def predict_file(file) -> Dict:
    target_url = f"{BACKEND_URL}/predict_file"
    st.info(f"Sending request to: {target_url}")
    try:
        files = {"file": (file.name, file.getvalue(), file.type)}
        response = requests.post(target_url, files=files, timeout=60)
        st.info(f"API Response Status: {response.status_code}")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.ConnectionError:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É API ({target_url}). –ó–∞–ø—É—â–µ–Ω –ª–∏ –æ–Ω?")
        return None
    except requests.exceptions.Timeout:
        st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.")
        return None
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        if e.response is not None:
             st.error(f"API Response Content: {e.response.text}")
             try:
                 error_detail = e.response.json().get("detail", "–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π")
                 st.error(f"–î–µ—Ç–∞–ª–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {error_detail}")
             except json.JSONDecodeError:
                  pass
        return None

def display_results(results: Dict):
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
    available_models = get_available_models()
    if not results: st.warning("API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."); return

    for model_name in available_models:
        if model_name not in results:
             st.warning(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ '{model_name}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ API.")
             continue

        st.markdown(f"--- \n### –ú–æ–¥–µ–ª—å: `{model_name}`")
        model_results = results.get(model_name, {})


        if isinstance(model_results, dict) and "error" in model_results:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {model_results['error']}")
            continue
        elif not isinstance(model_results, dict):
             st.error(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}: {model_results}")
             continue

        try:
            valid_items = {k: v for k, v in model_results.items() if isinstance(k, str) and isinstance(v, (int, float))}
            if len(valid_items) != len(model_results):
                 st.warning(f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {model_name} –∏–º–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã.")
            if not valid_items:
                 st.info("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —á–∏—Å–ª–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                 continue
            sorted_preds = sorted(valid_items.items(), key=lambda item: item[1], reverse=True)
        except (AttributeError, TypeError) as sort_e:
             st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å/–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {model_name}. –û—à–∏–±–∫–∞: {sort_e}. –î–∞–Ω–Ω—ã–µ: {model_results}")
             continue

        cols = st.columns(2)
        col_idx = 0
        for label, score in sorted_preds:
             with cols[col_idx % 2]:
                 try:
                     score = float(score)
                     if 0.0 <= score <= 1.0:
                          st.progress(value=score, text=f"{label.capitalize()}: {score:.2%}")
                     else:
                          pred_text = '–î–∞' if score >= 0.5 else '–ù–µ—Ç'
                          st.markdown(f"**{label.capitalize()}**: {pred_text} ({score:.3f})")
                 except (ValueError, TypeError) as format_e:
                      st.markdown(f"**{label.capitalize()}**: {score} (–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {format_e})")
             col_idx += 1

def rating_section():
    st.subheader("–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–µ–π:")
    available_models = get_available_models()
    if not available_models: st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏."); return
    if 'results' not in st.session_state or st.session_state['results'] is None: return

    with st.form("rating_form"):
        ratings_input = {}
        num_cols = min(len(available_models), 3)
        cols = st.columns(num_cols)
        for i, model_name in enumerate(available_models):
            with cols[i % num_cols]:
                ratings_input[model_name] = st.slider(
                    label=f"–û—Ü–µ–Ω–∫–∞ `{model_name}`", min_value=1, max_value=5, value=3, key=f"rating_{model_name}"
                )
        submitted = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫–∏")
        if submitted:
            submit_ratings(ratings_input)

def submit_ratings(ratings: Dict):
    success_count = 0; error_count = 0
    target_url_base = f"{BACKEND_URL}/rate_model"
    for model_name, rating in ratings.items():
        try:
            response = requests.post(target_url_base, json={"model_name": model_name, "rating": rating}, timeout=10)
            response.raise_for_status()
            success_count += 1
        except requests.exceptions.RequestException as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è `{model_name}`: {e}")
            error_count += 1

    if success_count > 0 and error_count == 0:
        st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏!")
        time.sleep(1)
        st.experimental_rerun()
    elif success_count > 0 and error_count > 0:
         st.warning("–ß–∞—Å—Ç—å –æ—Ü–µ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏.")
         time.sleep(1)
         st.experimental_rerun()
    elif error_count > 0:
         st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫–∏.")

def show_model_ratings():
    st.sidebar.subheader("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏")
    target_url = f"{BACKEND_URL}/model_ratings"
    try:
        response = requests.get(target_url, timeout=10)
        response.raise_for_status()
        ratings = response.json()
        if not ratings: st.sidebar.info("–û—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."); return

        available_models = get_available_models()
        displayed_count = 0
        for model_name in available_models:
            score = ratings.get(model_name)
            if score is not None and score > 0:
                st.sidebar.markdown(f"- **`{model_name}`**: {score:.2f} ‚òÖ")
                displayed_count +=1

        if displayed_count == 0:
             st.sidebar.info("–û—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")

    except requests.exceptions.RequestException as e:
        st.sidebar.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ ({target_url}): {e}")


def show_evaluation_metrics():
    st.title("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π")
    st.markdown("–ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –Ω–∞ **–≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–º** –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–º `evaluate.py`.")
    st.info("–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ `python evaluate.py` –ø–æ—Å–ª–µ (–ø–µ—Ä–µ)–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.")
    st.markdown("---")

    metrics_url = f"{BACKEND_URL}/evaluation_metrics"
    try:
        response = requests.get(metrics_url, timeout=15)
        response.raise_for_status()
        all_metrics_data = response.json()
    except requests.exceptions.ConnectionError:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API ({metrics_url}) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫.")
        return
    except requests.exceptions.HTTPError as e:
         if e.response.status_code == 404: st.warning("–§–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏ (`evaluation_metrics.json`) –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ `python evaluate.py`.")
         else: st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–µ—Ç—Ä–∏–∫ (HTTP {e.response.status_code}): {e}")
         return
    except requests.exceptions.RequestException as e: st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–µ—Ç—Ä–∏–∫: {e}"); return
    except json.JSONDecodeError: st.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –æ—Ç API (–Ω–µ JSON)."); return

    available_models = get_available_models()

    for model_name in available_models:
        st.markdown(f"--- \n#### –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏: `{model_name}`")
        model_metrics = all_metrics_data.get(model_name)

        if not model_metrics: st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏."); continue
        if "error" in model_metrics: st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–µ—Ç—Ä–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {model_metrics['error']}"); continue
        overall_cols = st.columns(4)
        with overall_cols[0]: st.metric("–¢–æ—á–Ω–æ—Å—Ç—å (Subset Acc)", f"{model_metrics.get('subset_accuracy', 0):.3f}")
        with overall_cols[1]: st.metric("Hamming Loss", f"{model_metrics.get('hamming_loss', 0):.3f}")
        with overall_cols[2]: st.metric("F1 Micro", f"{model_metrics.get('f1_micro', 0):.3f}")
        with overall_cols[3]: st.metric("F1 Macro", f"{model_metrics.get('f1_macro', 0):.3f}")
        if "classification_report" in model_metrics:
            with st.expander("–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º (Classification Report)"):
                report_data = model_metrics["classification_report"]
                labels_in_report = [l for l in report_data.keys() if l in LABELS]
                if labels_in_report:
                    report_df_data = {label: report_data[label] for label in labels_in_report}
                    report_df = pd.DataFrame.from_dict(report_df_data, orient='index').round(3)
                    report_df.columns = ['Precision', 'Recall', 'F1-Score', 'Support']
                    st.dataframe(report_df)
                else:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–ª–∞—Å—Å–∞–º –≤ classification report.")
        else:
            st.info("Classification report –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏.")


def main():
    st.set_page_config(page_title="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¢–µ–∫—Å—Ç–∞", layout="wide")

    with st.sidebar:
        st.title("üéõÔ∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        page = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            ("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π"),
            key="page_selector",
            label_visibility="collapsed"
        )
        st.markdown("---")
        show_model_ratings()

    if page == "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è":
        st.title("ü§ñ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ç–µ–º–∞–º")
        st.markdown(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–∞—Ç–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: **{', '.join(LABELS)}**.")
        st.markdown("---")

        for key in ['text_input', 'results', 'analyzed_text', 'analyzed_text_source']:
            if key not in st.session_state:
                st.session_state[key] = None if key != 'text_input' else ""

        col1, col2 = st.columns(2)
        with col1:
            st.subheader("–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞")
            st.text_area(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                value=st.session_state['text_input'],
                height=150,
                key="text_area_widget",
                on_change=lambda: st.session_state.update(text_input=st.session_state.text_area_widget)
            )
            uploaded_file = st.file_uploader(
                "–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt):", type=["txt"], key="file_uploader"
            )

        with col2:
            st.subheader("–ê–Ω–∞–ª–∏–∑")
            analyze_button = st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary", use_container_width=True)
            if analyze_button:
                if uploaded_file is not None:
                    try:
                        final_text = uploaded_file.read().decode("utf-8")
                        input_method = "file"
                        st.info(f"–ê–Ω–∞–ª–∏–∑ –∏–∑ —Ñ–∞–π–ª–∞: {uploaded_file.name}")
                        st.session_state['text_input'] = ""
                        st.session_state['analyzed_text_source'] = uploaded_file.name
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                        st.session_state['results'] = None; st.session_state['analyzed_text'] = None; return
                elif st.session_state['text_input']:
                    final_text = st.session_state['text_input'].strip()
                    if final_text:
                        input_method = "text"
                        st.info("–ê–Ω–∞–ª–∏–∑ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")
                        st.session_state['analyzed_text_source'] = "—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ"
                    else:
                        st.warning("–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –ø—É—Å—Ç–æ.")
                        st.session_state['results'] = None; st.session_state['analyzed_text'] = None; return
                else:
                    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
                    st.session_state['results'] = None; st.session_state['analyzed_text'] = None; return


                if final_text and input_method != "none":
                    with st.spinner("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç..."):
                        api_response = None
                        if input_method == "file":
                            uploaded_file.seek(0)
                            api_response = predict_file(uploaded_file)
                        elif input_method == "text":
                            api_response = predict_text(final_text)

                        st.session_state['results'] = api_response if api_response is not None else None
                        st.session_state['analyzed_text'] = final_text if api_response is not None else None

        if st.session_state.get('results') is not None:
            st.markdown("---")
            if st.session_state.get('analyzed_text') is not None:
                 source = st.session_state.get('analyzed_text_source', '–∏—Å—Ç–æ—á–Ω–∏–∫–∞')
                 with st.expander(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–∏–∑ {source}):", expanded=False):
                      st.text(st.session_state['analyzed_text'][:2000]) # Show preview
                      if len(st.session_state['analyzed_text']) > 2000: st.caption("...")
            display_results(st.session_state['results'])
            st.markdown("---")
            rating_section()

    elif page == "–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π":
        show_evaluation_metrics()

if __name__ == "__main__":
    main()